str_replace(" ", "_")
# Create dummy columns for city
biz_reviews <- biz_reviews %>%
dummy_cols(select_columns = 'city') %>%
select(-city)
# clean categories
biz_reviews$categories <- biz_reviews$categories %>%
tolower %>%
str_replace_all(" & |\\/", "_") %>%
str_replace_all(" +", "_") %>%
str_replace_all("\\(|\\)","")
# find unique categories
unique_categories <- biz_reviews$categories %>%
str_split(';') %>%
unlist %>%
unique
# Create dummy variable for categories
# Make a list of the categories column with individual categories
split_cats <- strsplit(biz_reviews$categories, split=';')
matches <- lapply(unique_categories, function(i) sapply(split_cats, function(j) +(any(grepl(i, j), na.rm = TRUE))))
cat_dummy_vars <- as.data.frame(Reduce(cbind, matches))
names(cat_dummy_vars) <- unique_categories
# combine dummy variables with other columns, remove original categories column
biz_reviews <- cbind(biz_reviews, cat_dummy_vars) %>%
select(-categories)
biz_reviews <- biz_reviews %>% mutate(is_personal = ifelse(nail_salons==1 |
hair_salons==1 |
veterinarians==1 |
dentists==1 |
general_dentistry==1 |
chiropractors==1 |
trainers==1 |
massage==1 |
tattoo==1 |
photographers==1 |
dermatologists==1 |
doctors==1 |
hair_removal==1 |
real_estate_agents==1 |
physical_therapy==1 |
teachers==1,
1, 0))
biz_reviews <- biz_reviews %>% mutate(is_personal = ifelse(nail_salons==1 |
hair_salons==1 |
veterinarians==1 |
dentists==1 |
general_dentistry==1 |
chiropractors==1 |
trainers==1 |
massage==1 |
tattoo==1 |
photographers==1 |
dermatologists==1 |
doctors==1 |
hair_removal==1 |
real_estate_agents==1 |
physical_therapy==1
1, 0))
biz_reviews <- biz_reviews %>% mutate(is_personal = ifelse(nail_salons==1 |
hair_salons==1 |
veterinarians==1 |
dentists==1 |
general_dentistry==1 |
chiropractors==1 |
trainers==1 |
massage==1 |
tattoo==1 |
photographers==1 |
dermatologists==1 |
doctors==1 |
hair_removal==1 |
real_estate_agents==1 |
physical_therapy==1,
1, 0))
# Calculate correlations of all columns vs review_stars
corr <- cor(biz_reviews)
fit <- lm(review_stars ~ ., train)
y_hat <- predict(fit, test)
rmse(test$review_stars, y_hat)
test_index <- createDataPartition(biz_reviews$review_stars, times = 1, p = 0.2, list = FALSE)
train <- biz_reviews %>% slice(-test_index)
test <- biz_reviews %>% slice(test_index)
fit <- lm(review_stars ~ ., train)
y_hat <- predict(fit, test)
rmse(test$review_stars, y_hat)
fit <- lm(review_stars ~ is_personal, train)
y_hat <- predict(fit, test)
rmse(test$review_stars, y_hat)
fit$coef
fit <- lm(review_stars ~ ., train)
fit$coef
order(fit$coef, decreasing=T)
fit$coef[order(fit$coef, decreasing=T)]
fit$coef[order(fit$coef, decreasing=T)]['is_personal']
sum(biz_reviews$slovakian==1)
biz_reviews[biz_reviews$slovakian==1]
biz_reviews[,biz_reviews$slovakian==1]
biz_reviews[biz_reviews$slovakian==1,]
cwd
library(RJSONIO)
library(RJSONIO)
library(RCurl)
library(RJSONIO)
library(plyr)
library(tidyverse)
library(lubridate)
library("ggmap")  # Google's Terms of Service: https://cloud.google.com/maps-platform/terms/.
#Please cite ggmap if you use it! See citation("ggmap") for details.
traffic <- read_csv("C:/Users/Valued Customer/Documents/GitHub/crux/portfolio/austin-traffic/Traffic_Count_Study_area.csv")
# clean column names
traffic <- as.data.frame(traffic) %>% dplyr::rename(location = '24 HOUR VOLUME COUNT LOCATIONS',
northbound = 'NB TOTAL',
southbound = 'SB TOTAL',
eastbound = 'EB TOTAL',
westbound = 'WB TOTOAL',
total_volume = 'TOTAL VOLUME',
date = DATE)
# Delete time since it is midnight for all entries, convert to date
traffic$date <- gsub(" .*", "", traffic$date)
traffic <- traffic %>%
mutate(date = mdy(date))
traffic$date <- as.Date(traffic$date)
# Data ranges from 2001 - 2015
traffic %>%   summarise(min = min(date),
max = max(date))
# Filter date range to only include dates since 1/1/2010
traffic <- traffic %>% filter(date >= as.Date("2010/01/01"))
nrow(traffic)
# Remove extra location info
traffic$location <- gsub(" - .*","", traffic$location)
# Locate GPS coordinates of location
api_key = 'AIzaSyD_lrb7PLeFP8l-q_p6r9RA4Pz1llCxyE0'
# Convert location into url with api
url <- function(location, return.call = "json") {
root <- "https://maps.googleapis.com/maps/api/geocode/"
location <- paste(location, 'Austin', 'TX', sep = ", ")
location <- gsub(" ", "+", location)
u <- paste(root, return.call, "?address=", location, "&key=", api_key, sep = "")
return(URLencode(u))
}
# Get location info
geoCode <- function(location,verbose=FALSE) {
if(verbose) cat(location,"\n")
u <- url(location)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type  <- x$results[[1]]$geometry$location_type
formatted_address  <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
Sys.sleep(.5)
} else {
print(x$status)
return(c(NA,NA,NA, NA))
}
}
# Get gps coords in chunks, otherwise API is overloaded and fails
for (x in seq(1, nrow(traffic), 50)) {
if (x == 951) {
traffic[x:nrow(traffic), 'latitude'] <- apply(traffic[x:(nrow(traffic)),]['location'], 1, geoCode)[1,]
traffic[x:nrow(traffic), 'longitude'] <- apply(traffic[x:(nrow(traffic)),]['location'], 1, geoCode)[2,]
}
else {
traffic[x:(x+49), 'latitude'] <- apply(traffic[x:(x+49),]['location'], 1, geoCode)[1,]
traffic[x:(x+49), 'longitude'] <- apply(traffic[x:(x+49),]['location'], 1, geoCode)[2,]
}
Sys.sleep(10)
}
traffic$latitude <- as.numeric(traffic$latitude)
traffic$longitude <- as.numeric(traffic$longitude)
# plot coordinates
# Set API Key
ggmap::register_google(key = "AIzaSyA94oLsseE35T4_081pfqaeePzAP0ePvi0")
p <- ggmap(get_googlemap(center = c(lon = -97.7431, lat = 30.2672),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p + geom_point(aes(x = longitude, y = latitude,  color = total_volume), data = traffic, size = 2) + ggtitle("Traffic hotspots in Austin, TX") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) + scale_color_gradient(low = "green",high = "red",  trans='log')
# first we separate traffic into eastbound, westbound, northbound, and southbound
p + geom_point(aes(x = longitude, y = latitude,  color = total_volume), data = traffic, size = 2) + ggtitle("Traffic hotspots in Austin, TX") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) + scale_color_gradient(low = "green",high = "red",  trans='log')
eastbound <- traffic %>% filter(is.na(eastbound) == FALSE) %>% mutate(latitude = latitude + .0015) %>% select(eastbound, latitude, longitude)
westbound <- traffic %>% filter(is.na(westbound) == FALSE) %>% mutate(latitude = latitude - .0015) %>% select(westbound, latitude, longitude)
northbound <- traffic %>% filter(is.na(northbound) == FALSE) %>% mutate(longitude = longitude + .0015) %>% select(northbound, latitude, longitude)
southbound <- traffic %>% filter(is.na(southbound) == FALSE) %>% mutate(longitude = longitude - .0015) %>% select(southbound, latitude, longitude)
p + geom_point(aes(x = longitude, y = latitude, color = eastbound), data = eastbound, size = 2, shape = 22) +
geom_point(aes(x = longitude, y = latitude, color = westbound), data = westbound, size = 2, shape = 21) +
geom_point(aes(x = longitude, y = latitude, color = northbound), data = northbound, size = 2, shape = 24) +
geom_point(aes(x = longitude, y = latitude, color = southbound), data = southbound, size = 2, shape = 25) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
# there is no visual difference between northbound/southbound rates and eastbound/westbound rates and the map is cluttered by shapes, so we will aggregate into two groups
eastwest <- traffic %>% filter(is.na(eastbound) == FALSE) %>% select(total_volume, latitude, longitude)
northsouth <- traffic %>% filter(is.na(northbound) == FALSE) %>% select(total_volume, latitude, longitude)
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
# This is a better and more clear representation of the data
source('~/GitHub/crux/portfolio/austin_traffic/austin_traffic_eda.r', echo=TRUE)
setwd('C:/Users/Valued Customer/Documents/GitHub/crux/portfolio/austin-traffic')
setwd('C:/Users/Valued Customer/Documents/GitHub/crux/portfolio/austin_traffic')
library(RJSONIO)
library(RCurl)
library(RJSONIO)
library(plyr)
library(tidyverse)
library(lubridate)
library("ggmap")  # Google's Terms of Service: https://cloud.google.com/maps-platform/terms/.
#Please cite ggmap if you use it! See citation("ggmap") for details.
setwd('C:/Users/Valued Customer/Documents/GitHub/crux/portfolio/austin_traffic')
traffic <- read_csv("Traffic_Count_Study_area.csv")
# clean column names
traffic <- as.data.frame(traffic) %>% dplyr::rename(location = '24 HOUR VOLUME COUNT LOCATIONS',
northbound = 'NB TOTAL',
southbound = 'SB TOTAL',
eastbound = 'EB TOTAL',
westbound = 'WB TOTOAL',
total_volume = 'TOTAL VOLUME',
date = DATE)
# Delete time since it is midnight for all entries, convert to date
traffic$date <- gsub(" .*", "", traffic$date)
traffic <- traffic %>%
mutate(date = mdy(date))
traffic$date <- as.Date(traffic$date)
# Data ranges from 2001 - 2015
traffic %>%   summarise(min = min(date),
max = max(date))
# Filter date range to only include dates since 1/1/2010
traffic <- traffic %>% filter(date >= as.Date("2010/01/01"))
nrow(traffic)
# Remove extra location info
traffic$location <- gsub(" - .*","", traffic$location)
# Locate GPS coordinates of location
api_key = 'AIzaSyD_lrb7PLeFP8l-q_p6r9RA4Pz1llCxyE0'
# Convert location into url with api
url <- function(location, return.call = "json") {
root <- "https://maps.googleapis.com/maps/api/geocode/"
location <- paste(location, 'Austin', 'TX', sep = ", ")
location <- gsub(" ", "+", location)
u <- paste(root, return.call, "?address=", location, "&key=", api_key, sep = "")
return(URLencode(u))
}
# Get location info
geoCode <- function(location,verbose=FALSE) {
if(verbose) cat(location,"\n")
u <- url(location)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type  <- x$results[[1]]$geometry$location_type
formatted_address  <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
Sys.sleep(.5)
} else {
print(x$status)
return(c(NA,NA,NA, NA))
}
}
# Get gps coords in chunks, otherwise API is overloaded and fails
for (x in seq(1, nrow(traffic), 50)) {
if (x == 951) {
traffic[x:nrow(traffic), 'latitude'] <- apply(traffic[x:(nrow(traffic)),]['location'], 1, geoCode)[1,]
traffic[x:nrow(traffic), 'longitude'] <- apply(traffic[x:(nrow(traffic)),]['location'], 1, geoCode)[2,]
}
else {
traffic[x:(x+49), 'latitude'] <- apply(traffic[x:(x+49),]['location'], 1, geoCode)[1,]
traffic[x:(x+49), 'longitude'] <- apply(traffic[x:(x+49),]['location'], 1, geoCode)[2,]
}
Sys.sleep(10)
}
traffic$latitude <- as.numeric(traffic$latitude)
traffic$longitude <- as.numeric(traffic$longitude)
# plot coordinates
# Set API Key
ggmap::register_google(key = "AIzaSyA94oLsseE35T4_081pfqaeePzAP0ePvi0")
p <- ggmap(get_googlemap(center = c(lon = -97.7431, lat = 30.2672),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p + geom_point(aes(x = longitude, y = latitude,  color = total_volume), data = traffic, size = 2) + ggtitle("Traffic hotspots in Austin, TX") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) + scale_color_gradient(low = "green",high = "red",  trans='log')
# first we separate traffic into eastbound, westbound, northbound, and southbound
p + geom_point(aes(x = longitude, y = latitude,  color = total_volume), data = traffic, size = 2) + ggtitle("Traffic hotspots in Austin, TX") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) + scale_color_gradient(low = "green",high = "red",  trans='log')
eastbound <- traffic %>% filter(is.na(eastbound) == FALSE) %>% mutate(latitude = latitude + .0015) %>% select(eastbound, latitude, longitude)
westbound <- traffic %>% filter(is.na(westbound) == FALSE) %>% mutate(latitude = latitude - .0015) %>% select(westbound, latitude, longitude)
northbound <- traffic %>% filter(is.na(northbound) == FALSE) %>% mutate(longitude = longitude + .0015) %>% select(northbound, latitude, longitude)
southbound <- traffic %>% filter(is.na(southbound) == FALSE) %>% mutate(longitude = longitude - .0015) %>% select(southbound, latitude, longitude)
p + geom_point(aes(x = longitude, y = latitude, color = eastbound), data = eastbound, size = 2, shape = 22) +
geom_point(aes(x = longitude, y = latitude, color = westbound), data = westbound, size = 2, shape = 21) +
geom_point(aes(x = longitude, y = latitude, color = northbound), data = northbound, size = 2, shape = 24) +
geom_point(aes(x = longitude, y = latitude, color = southbound), data = southbound, size = 2, shape = 25) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
# there is no visual difference between northbound/southbound rates and eastbound/westbound rates and the map is cluttered by shapes, so we will aggregate into two groups
eastwest <- traffic %>% filter(is.na(eastbound) == FALSE) %>% select(total_volume, latitude, longitude)
northsouth <- traffic %>% filter(is.na(northbound) == FALSE) %>% select(total_volume, latitude, longitude)
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
# This is a better and more clear representation of the data
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX", 'center') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
p <- ggmap(get_googlemap(center = c(lon = -97.7431, lat = 30.3),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
p <- ggmap(get_googlemap(center = c(lon = -97.7431, lat = 30.32),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = eastwest, size = 2, shape = 15) +
geom_point(aes(x = longitude, y = latitude, color = total_volume), data = northsouth, size = 2, shape = 17) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
traffic
traffic$eastwest <- ifelse(northbound.isna | southbound.isna, 1, 0)
traffic$eastwest <- ifelse(traffic$northbound.isna | traffic$southbound.isna, 1, 0)
traffic$eastwest <- ifelse(traffic$eastbound > 0 | traffic$westbound > 0, 1, 0)
traffic
traffic$eastwest <- ifelse(isNA(traffic$eastbound) | isNA(traffic$westbound), 'north-south', 'east-west')
traffic$eastwest <- ifelse(is.na(traffic$eastbound) | is.na(traffic$westbound), 'north-south', 'east-west')
traffic
p + geom_point(aes(x = longitude, y = latitude, color = total_volume), data = traffic, size = 2, shape = direction) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
p + geom_point(aes(x = longitude, y = latitude, color = total_volume, shape = direction), data = traffic, size = 2) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
traffic$direction <- ifelse(is.na(traffic$eastbound) | is.na(traffic$westbound), 'north-south', 'east-west')
p + geom_point(aes(x = longitude, y = latitude, color = total_volume, shape = direction), data = traffic, size = 2) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
library(RJSONIO)
library(RCurl)
library(RJSONIO)
library(plyr)
library(tidyverse)
library(lubridate)
library("ggmap")  # Google's Terms of Service: https://cloud.google.com/maps-platform/terms/.
#Please cite ggmap if you use it! See citation("ggmap") for details.
traffic <- read_csv("Traffic_Count_Study_area.csv")
# clean column names
traffic <- as.data.frame(traffic) %>% dplyr::rename(location = '24 HOUR VOLUME COUNT LOCATIONS',
northbound = 'NB TOTAL',
southbound = 'SB TOTAL',
eastbound = 'EB TOTAL',
westbound = 'WB TOTOAL',
total_volume = 'TOTAL VOLUME',
date = DATE)
# Remove time since it is midnight for all entries, convert to date
traffic$date <- gsub(" .*", "", traffic$date)
traffic <- traffic %>%
mutate(date = mdy(date))
traffic$date <- as.Date(traffic$date)
# Data ranges from 2001 - 2015
traffic %>%   summarise(min = min(date),
max = max(date))
# Filter date range to only include dates since 1/1/2010
traffic <- traffic %>% filter(date >= as.Date("2010/01/01"))
nrow(traffic)
# Remove extra location info
traffic$location <- gsub(" - .*","", traffic$location)
# Add column for shows east-west or north south traffic flow
traffic$direction <- ifelse(is.na(traffic$eastbound) | is.na(traffic$westbound), 'north-south', 'east-west')
# Locate GPS coordinates of location
api_key = 'AIzaSyD_lrb7PLeFP8l-q_p6r9RA4Pz1llCxyE0'
# Convert location into url with api
url <- function(location, return.call = "json") {
root <- "https://maps.googleapis.com/maps/api/geocode/"
location <- paste(location, 'Austin', 'TX', sep = ", ")
location <- gsub(" ", "+", location)
u <- paste(root, return.call, "?address=", location, "&key=", api_key, sep = "")
return(URLencode(u))
}
# Get location info
geoCode <- function(location,verbose=FALSE) {
if(verbose) cat(location,"\n")
u <- url(location)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type  <- x$results[[1]]$geometry$location_type
formatted_address  <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
Sys.sleep(.5)
} else {
print(x$status)
return(c(NA,NA,NA, NA))
}
}
# Get gps coords in chunks, otherwise API is overloaded and fails
for (x in seq(1, nrow(traffic), 50)) {
if (x == 951) {
traffic[x:nrow(traffic), 'latitude'] <- apply(traffic[x:(nrow(traffic)),]['location'], 1, geoCode)[1,]
traffic[x:nrow(traffic), 'longitude'] <- apply(traffic[x:(nrow(traffic)),]['location'], 1, geoCode)[2,]
}
else {
traffic[x:(x+49), 'latitude'] <- apply(traffic[x:(x+49),]['location'], 1, geoCode)[1,]
traffic[x:(x+49), 'longitude'] <- apply(traffic[x:(x+49),]['location'], 1, geoCode)[2,]
}
Sys.sleep(10)
}
traffic$latitude <- as.numeric(traffic$latitude)
traffic$longitude <- as.numeric(traffic$longitude)
# plot coordinates
# Set API Key
ggmap::register_google(key = "AIzaSyA94oLsseE35T4_081pfqaeePzAP0ePvi0")
p <- ggmap(get_googlemap(center = c(lon = -97.7431, lat = 30.32),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p + geom_point(aes(x = longitude, y = latitude, color = total_volume, shape = direction), data = traffic, size = 2) +
ggtitle("Traffic hotspots in Austin, TX") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_color_gradient(low = "green",high = "red",  trans='log')
